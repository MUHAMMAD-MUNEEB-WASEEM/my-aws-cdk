"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mutation_1 = require("./mutation");
const queries_1 = require("./queries");
const getReview_1 = require("./getReview");
const getRestaurant_1 = require("./getRestaurant");
const getFriendOfFriend_1 = require("./getFriendOfFriend");
const getRecommendByFriend_1 = require("./getRecommendByFriend");
const getRestaurantRatedByFriend_1 = require("./getRestaurantRatedByFriend");
const getRestaurantBycuisine_1 = require("./getRestaurantBycuisine");
const getNewestReview_1 = require("./getNewestReview");
const getNearestHRRestaurant_1 = require("./getNearestHRRestaurant");
const getPastXdays_1 = require("./getPastXdays");
exports.handler = async (event) => {
    switch (event.info.fieldName) {
        //Vertices
        case "addUser":
            return await mutation_1.addUser(event.arguments.user);
        case "addReviews":
            return await mutation_1.addReviews(event.arguments.review);
        case "addRestaurant":
            return await mutation_1.addRestaurant(event.arguments.restaurant);
        //Edges
        case "createFriendShip":
            return await mutation_1.createFriendShip(event.arguments.friendship);
        case "addReview":
            return await mutation_1.addReview(event.arguments.user);
        case "recommendRestaurant":
            return await mutation_1.recommendRestaurant(event.arguments.user, event.arguments.restaurant);
        case "about":
            return await mutation_1.about(event.arguments.restaurant);
        //Query
        case "userFriendList":
            return await queries_1.default(event.arguments.userName);
        case "friendofFriend":
            return await getFriendOfFriend_1.default(event.arguments.userName);
        case "recommendByFriend":
            return await getRecommendByFriend_1.default(event.arguments.userName);
        case "restaurantRatedByFriend":
            return await getRestaurantRatedByFriend_1.default(event.arguments.userName);
        case "restaurantBycuisine":
            return await getRestaurantBycuisine_1.default(event.arguments.cuisine);
        case "newestReview":
            return await getNewestReview_1.default(event.arguments.restaurantName);
        case "nearestHRRestaurant":
            return await getNearestHRRestaurant_1.default(event.arguments.city);
        case "pastXDays":
            return await getPastXdays_1.default(event.arguments.userName, event.arguments.date);
        //test queries
        case "getReview":
            return await getReview_1.default();
        case "getRestaurant":
            return await getRestaurant_1.default();
        default:
            return null;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx5Q0FBdUg7QUFDdkgsdUNBQXVDO0FBQ3ZDLDJDQUFvQztBQUNwQyxtREFBNEM7QUFDNUMsMkRBQWdEO0FBQ2hELGlFQUFzRDtBQUN0RCw2RUFBa0U7QUFDbEUscUVBQTBEO0FBQzFELHVEQUE0QztBQUM1QyxxRUFBMEQ7QUFDMUQsaURBQXNDO0FBa0R0QyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFrQixFQUFFLEVBQUU7SUFDN0MsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUM1QixVQUFVO1FBQ1YsS0FBSyxTQUFTO1lBQ1osT0FBTyxNQUFNLGtCQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxLQUFLLFlBQVk7WUFDZixPQUFPLE1BQU0scUJBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELEtBQUssZUFBZTtZQUNsQixPQUFPLE1BQU0sd0JBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpELE9BQU87UUFDUCxLQUFLLGtCQUFrQjtZQUNyQixPQUFPLE1BQU0sMkJBQWdCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxLQUFLLFdBQVc7WUFDZCxPQUFPLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLEtBQUsscUJBQXFCO1lBQ3ZCLE9BQU8sTUFBTSw4QkFBbUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JGLEtBQUssT0FBTztZQUNWLE9BQU8sTUFBTSxnQkFBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFakQsT0FBTztRQUNQLEtBQUssZ0JBQWdCO1lBQ25CLE9BQU8sTUFBTSxpQkFBYyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsS0FBSyxnQkFBZ0I7WUFDbkIsT0FBTyxNQUFNLDJCQUFjLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxLQUFLLG1CQUFtQjtZQUN0QixPQUFPLE1BQU0sOEJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRCxLQUFLLHlCQUF5QjtZQUM1QixPQUFPLE1BQU0sb0NBQXVCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRSxLQUFLLHFCQUFxQjtZQUN4QixPQUFPLE1BQU0sZ0NBQW1CLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxLQUFLLGNBQWM7WUFDakIsT0FBTyxNQUFNLHlCQUFZLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1RCxLQUFLLHFCQUFxQjtZQUN4QixPQUFPLE1BQU0sZ0NBQW1CLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxLQUFLLFdBQVc7WUFDZCxPQUFPLE1BQU0sc0JBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpFLGNBQWM7UUFDZCxLQUFLLFdBQVc7WUFDZCxPQUFPLE1BQU0sbUJBQVMsRUFBRSxDQUFDO1FBQzNCLEtBQUssZUFBZTtZQUNsQixPQUFPLE1BQU0sdUJBQWEsRUFBRSxDQUFDO1FBQy9CO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIiAgXHJcbmltcG9ydCB7YWRkVXNlciwgYWRkUmV2aWV3cywgYWRkUmVzdGF1cmFudCwgY3JlYXRlRnJpZW5kU2hpcCwgYWRkUmV2aWV3LCByZWNvbW1lbmRSZXN0YXVyYW50LCBhYm91dH0gZnJvbSAnLi9tdXRhdGlvbic7XHJcbmltcG9ydCB1c2VyRnJpZW5kTGlzdCBmcm9tICcuL3F1ZXJpZXMnO1xyXG5pbXBvcnQgZ2V0UmV2aWV3IGZyb20gJy4vZ2V0UmV2aWV3JztcclxuaW1wb3J0IGdldFJlc3RhdXJhbnQgZnJvbSAnLi9nZXRSZXN0YXVyYW50JztcclxuaW1wb3J0IGZyaWVuZG9mRnJpZW5kIGZyb20gJy4vZ2V0RnJpZW5kT2ZGcmllbmQnXHJcbmltcG9ydCByZWNvbW1lbmRCeUZyaWVuZCBmcm9tICcuL2dldFJlY29tbWVuZEJ5RnJpZW5kJ1xyXG5pbXBvcnQgcmVzdGF1cmFudFJhdGVkQnlGcmllbmQgZnJvbSAnLi9nZXRSZXN0YXVyYW50UmF0ZWRCeUZyaWVuZCdcclxuaW1wb3J0IHJlc3RhdXJhbnRCeWN1aXNpbmUgZnJvbSAnLi9nZXRSZXN0YXVyYW50QnljdWlzaW5lJ1xyXG5pbXBvcnQgbmV3ZXN0UmV2aWV3IGZyb20gJy4vZ2V0TmV3ZXN0UmV2aWV3J1xyXG5pbXBvcnQgbmVhcmVzdEhSUmVzdGF1cmFudCBmcm9tICcuL2dldE5lYXJlc3RIUlJlc3RhdXJhbnQnXHJcbmltcG9ydCBwYXN0WERheXMgZnJvbSAnLi9nZXRQYXN0WGRheXMnXHJcblxyXG4vLyBpbXBvcnQgVXNlciBmcm9tICcuL1Bvc3QnO1xyXG5cclxuXHJcbnR5cGUgVXNlcj17XHJcbiAgdXNlck5hbWU6U3RyaW5nO1xyXG4gIGlkOlN0cmluZztcclxufVxyXG50eXBlIFJldmlldz17XHJcbiAgaWQ6U3RyaW5nO1xyXG4gIHJlc3RhdXJhbnROYW1lOlN0cmluZztcclxuICB0ZXh0OiBTdHJpbmc7XHJcblx0cmF0aW5nOiBudW1iZXI7XHJcbiAgY2l0eTpTdHJpbmc7XHJcbiAgcmVzdGF1cmFudElkOlN0cmluZztcclxuICBwZXJzb25JZDpTdHJpbmc7XHJcbiAgZGF0ZTpzdHJpbmc7XHJcbn1cclxudHlwZSBSZXN0YXVyYW50PXtcclxuICBuYW1lOiBTdHJpbmc7XHJcbiAgY2l0eTogU3RyaW5nO1xyXG4gIGN1aXNpbmU6IFN0cmluZztcclxuICByYXRpbmc6IG51bWJlcjtcclxuICBpZDogU3RyaW5nO1xyXG59XHJcbnR5cGUgRnJpZW5kc2hpcD17XHJcbiAgaWQ6U3RyaW5nO1xyXG4gIGZyaWVuZEZyb206U3RyaW5nO1xyXG4gIGZyaWVuZFdpdGg6U3RyaW5nO1xyXG59XHJcblxyXG5cclxudHlwZSBBcHBTeW5jRXZlbnQgPSB7XHJcbiAgaW5mbzoge1xyXG4gICAgZmllbGROYW1lOiBzdHJpbmdcclxuICB9LFxyXG4gIGFyZ3VtZW50czoge1xyXG4gICAgdXNlcjogVXNlclxyXG4gICAgdXNlck5hbWU6U3RyaW5nXHJcbiAgICByZXZpZXc6IFJldmlld1xyXG4gICAgcmVzdGF1cmFudDpSZXN0YXVyYW50XHJcbiAgICBmcmllbmRzaGlwOkZyaWVuZHNoaXBcclxuICAgIGN1aXNpbmU6IFN0cmluZztcclxuICAgIHJlc3RhdXJhbnROYW1lOlN0cmluZztcclxuICAgIGNpdHk6U3RyaW5nO1xyXG4gICAgZGF0ZTpzdHJpbmc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6QXBwU3luY0V2ZW50KSA9PiB7XHJcbiAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xyXG4gICAgLy9WZXJ0aWNlc1xyXG4gICAgY2FzZSBcImFkZFVzZXJcIjpcclxuICAgICAgcmV0dXJuIGF3YWl0IGFkZFVzZXIoZXZlbnQuYXJndW1lbnRzLnVzZXIpO1xyXG4gICAgY2FzZSBcImFkZFJldmlld3NcIjpcclxuICAgICAgcmV0dXJuIGF3YWl0IGFkZFJldmlld3MoZXZlbnQuYXJndW1lbnRzLnJldmlldyk7XHJcbiAgICBjYXNlIFwiYWRkUmVzdGF1cmFudFwiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgYWRkUmVzdGF1cmFudChldmVudC5hcmd1bWVudHMucmVzdGF1cmFudCk7XHJcbiAgICBcclxuICAgIC8vRWRnZXNcclxuICAgIGNhc2UgXCJjcmVhdGVGcmllbmRTaGlwXCI6XHJcbiAgICAgIHJldHVybiBhd2FpdCBjcmVhdGVGcmllbmRTaGlwKGV2ZW50LmFyZ3VtZW50cy5mcmllbmRzaGlwKTtcclxuICAgIGNhc2UgXCJhZGRSZXZpZXdcIjpcclxuICAgICAgcmV0dXJuIGF3YWl0IGFkZFJldmlldyhldmVudC5hcmd1bWVudHMudXNlcik7XHJcbiAgICBjYXNlIFwicmVjb21tZW5kUmVzdGF1cmFudFwiOlxyXG4gICAgICAgcmV0dXJuIGF3YWl0IHJlY29tbWVuZFJlc3RhdXJhbnQoZXZlbnQuYXJndW1lbnRzLnVzZXIsZXZlbnQuYXJndW1lbnRzLnJlc3RhdXJhbnQpO1xyXG4gICAgY2FzZSBcImFib3V0XCI6XHJcbiAgICAgIHJldHVybiBhd2FpdCBhYm91dChldmVudC5hcmd1bWVudHMucmVzdGF1cmFudCk7XHJcbiAgICBcclxuICAgIC8vUXVlcnlcclxuICAgIGNhc2UgXCJ1c2VyRnJpZW5kTGlzdFwiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgdXNlckZyaWVuZExpc3QoZXZlbnQuYXJndW1lbnRzLnVzZXJOYW1lKTtcclxuICAgIGNhc2UgXCJmcmllbmRvZkZyaWVuZFwiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgZnJpZW5kb2ZGcmllbmQoZXZlbnQuYXJndW1lbnRzLnVzZXJOYW1lKTtcclxuICAgIGNhc2UgXCJyZWNvbW1lbmRCeUZyaWVuZFwiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgcmVjb21tZW5kQnlGcmllbmQoZXZlbnQuYXJndW1lbnRzLnVzZXJOYW1lKTtcclxuICAgIGNhc2UgXCJyZXN0YXVyYW50UmF0ZWRCeUZyaWVuZFwiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgcmVzdGF1cmFudFJhdGVkQnlGcmllbmQoZXZlbnQuYXJndW1lbnRzLnVzZXJOYW1lKTtcclxuICAgIGNhc2UgXCJyZXN0YXVyYW50QnljdWlzaW5lXCI6XHJcbiAgICAgIHJldHVybiBhd2FpdCByZXN0YXVyYW50QnljdWlzaW5lKGV2ZW50LmFyZ3VtZW50cy5jdWlzaW5lKTtcclxuICAgIGNhc2UgXCJuZXdlc3RSZXZpZXdcIjpcclxuICAgICAgcmV0dXJuIGF3YWl0IG5ld2VzdFJldmlldyhldmVudC5hcmd1bWVudHMucmVzdGF1cmFudE5hbWUpO1xyXG4gICAgY2FzZSBcIm5lYXJlc3RIUlJlc3RhdXJhbnRcIjpcclxuICAgICAgcmV0dXJuIGF3YWl0IG5lYXJlc3RIUlJlc3RhdXJhbnQoZXZlbnQuYXJndW1lbnRzLmNpdHkpO1xyXG4gICAgY2FzZSBcInBhc3RYRGF5c1wiOlxyXG4gICAgICByZXR1cm4gYXdhaXQgcGFzdFhEYXlzKGV2ZW50LmFyZ3VtZW50cy51c2VyTmFtZSwgZXZlbnQuYXJndW1lbnRzLmRhdGUpO1xyXG5cclxuICAgIC8vdGVzdCBxdWVyaWVzXHJcbiAgICBjYXNlIFwiZ2V0UmV2aWV3XCI6XHJcbiAgICAgIHJldHVybiBhd2FpdCBnZXRSZXZpZXcoKTtcclxuICAgIGNhc2UgXCJnZXRSZXN0YXVyYW50XCI6XHJcbiAgICAgIHJldHVybiBhd2FpdCBnZXRSZXN0YXVyYW50KCk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn0iXX0=