"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.about = exports.recommendRestaurant = exports.addReview = exports.createFriendShip = exports.addRestaurant = exports.addReviews = exports.addUser = void 0;
const gremlin = require('gremlin');
const DriverRemoteConnection = gremlin.driver.DriverRemoteConnection;
const Graph = gremlin.structure.Graph;
const uri = process.env.WRITER;
//Verices
async function addUser(user) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addV('person').property('userName', user.userName).next();
    dc.close();
    return user;
}
exports.addUser = addUser;
async function addReviews(review) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    //for order we are using date and time fucction
    const date = new Date();
    const time = date.getTime();
    await g.addV('review').property('text', review.text).property('rating', review.rating).property('personId', review.personId).property("restaurantId", review.restaurantId).property('restaurantName', review.restaurantName).property('city', review.city).property('date', date).property('time', time).next();
    dc.close();
    return review;
}
exports.addReviews = addReviews;
async function addRestaurant(restaurant) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addV('restaurant').property('name', restaurant.name).property('city', restaurant.city).property('cuisine', restaurant.cuisine).property('rating', restaurant.rating).next();
    dc.close();
    return restaurant;
}
exports.addRestaurant = addRestaurant;
//Edges
async function createFriendShip(friendship) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addE('friend').from_(g.V().hasLabel('person').has('userName', friendship.friendFrom)).to(g.V().hasLabel('person').has('userName', friendship.friendWith)).elementMap().toList();
    dc.close();
    return friendship;
}
exports.createFriendShip = createFriendShip;
async function addReview(user) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addE('addReview').from_(g.V().hasLabel('person').has('userName', user.userName)).to(g.V().hasLabel('review')).next();
    dc.close();
    return user;
}
exports.addReview = addReview;
async function recommendRestaurant(user, restaurant) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addE('recommendedRestaurant').from_(g.V().hasLabel('person').has('userName', user.userName)).to(g.V().hasLabel('restaurant').has('name', restaurant.name)).elementMap().toList();
    dc.close();
    return restaurant;
}
exports.recommendRestaurant = recommendRestaurant;
async function about(restaurant) {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    await g.addE('about').from_(g.V().hasLabel('review')).to(g.V().hasLabel('restaurant').has('name', restaurant.name)).elementMap().toList();
    dc.close();
    return restaurant;
}
exports.about = about;
//# sourceMappingURL=data:application/json;base64,