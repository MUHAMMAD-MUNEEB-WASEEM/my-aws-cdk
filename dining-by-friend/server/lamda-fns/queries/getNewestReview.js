"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gremlin = require('gremlin');
// const order = gremlin.process.order;
const DriverRemoteConnection = gremlin.driver.DriverRemoteConnection;
const Graph = gremlin.structure.Graph;
const uri = process.env.READER;
const { order: { desc, asc } } = gremlin.process;
const newestReview = async (restaurantName) => {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    try {
        let data = await g.V().hasLabel('review').has('time').has('restaurantName', restaurantName).order().by('time', desc).toList();
        let posts = Array();
        for (const v of data) {
            const _properties = await g.V(v.id).properties().toList();
            let post = _properties.reduce((acc, next) => {
                acc[next.label] = next.value;
                return acc;
            }, {});
            post.id = v.id;
            posts.push(post);
        }
        dc.close();
        return posts;
    }
    catch (err) {
        console.log('ERROR', err);
        return null;
    }
};
exports.default = newestReview;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0TmV3ZXN0UmV2aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0TmV3ZXN0UmV2aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ2xDLHVDQUF1QztBQUN2QyxNQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUE7QUFDcEUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUE7QUFDckMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUE7QUFDOUIsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFJakQsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLGNBQXFCLEVBQUUsRUFBRTtJQUNqRCxJQUFJLEVBQUUsR0FBRyxJQUFJLHNCQUFzQixDQUFDLFNBQVMsR0FBRyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDL0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQTtJQUN6QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzFDLElBQUk7UUFDRixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQzNILElBQUksS0FBSyxHQUFHLEtBQUssRUFBRSxDQUFBO1FBRW5CLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3BCLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDekQsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO2dCQUM1QixPQUFPLEdBQUcsQ0FBQTtZQUNaLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUNOLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtZQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDakI7UUFFRCxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDVixPQUFPLEtBQUssQ0FBQTtLQUNiO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUN6QixPQUFPLElBQUksQ0FBQTtLQUNkO0FBQ0wsQ0FBQyxDQUFBO0FBSUQsa0JBQWUsWUFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ3JlbWxpbiA9IHJlcXVpcmUoJ2dyZW1saW4nKVxyXG4vLyBjb25zdCBvcmRlciA9IGdyZW1saW4ucHJvY2Vzcy5vcmRlcjtcclxuY29uc3QgRHJpdmVyUmVtb3RlQ29ubmVjdGlvbiA9IGdyZW1saW4uZHJpdmVyLkRyaXZlclJlbW90ZUNvbm5lY3Rpb25cclxuY29uc3QgR3JhcGggPSBncmVtbGluLnN0cnVjdHVyZS5HcmFwaFxyXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5SRUFERVJcclxuY29uc3QgeyBvcmRlcjogeyBkZXNjICwgYXNjfSB9ID0gZ3JlbWxpbi5wcm9jZXNzO1xyXG5cclxuXHJcblxyXG5jb25zdCBuZXdlc3RSZXZpZXcgPSBhc3luYyAocmVzdGF1cmFudE5hbWU6U3RyaW5nKSA9PiB7XHJcbiAgICBsZXQgZGMgPSBuZXcgRHJpdmVyUmVtb3RlQ29ubmVjdGlvbihgd3NzOi8vJHt1cml9L2dyZW1saW5gLCB7fSlcclxuICAgIGNvbnN0IGdyYXBoID0gbmV3IEdyYXBoKClcclxuICAgIGNvbnN0IGcgPSBncmFwaC50cmF2ZXJzYWwoKS53aXRoUmVtb3RlKGRjKVxyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGRhdGEgPSBhd2FpdCBnLlYoKS5oYXNMYWJlbCgncmV2aWV3JykuaGFzKCd0aW1lJykuaGFzKCdyZXN0YXVyYW50TmFtZScscmVzdGF1cmFudE5hbWUpLm9yZGVyKCkuYnkoJ3RpbWUnLGRlc2MpLnRvTGlzdCgpXHJcbiAgICAgIGxldCBwb3N0cyA9IEFycmF5KClcclxuXHJcbiAgICAgIGZvciAoY29uc3QgdiBvZiBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgX3Byb3BlcnRpZXMgPSBhd2FpdCBnLlYodi5pZCkucHJvcGVydGllcygpLnRvTGlzdCgpXHJcbiAgICAgICAgbGV0IHBvc3QgPSBfcHJvcGVydGllcy5yZWR1Y2UoKGFjYywgbmV4dCkgPT4ge1xyXG4gICAgICAgICAgYWNjW25leHQubGFiZWxdID0gbmV4dC52YWx1ZVxyXG4gICAgICAgICAgcmV0dXJuIGFjY1xyXG4gICAgICAgIH0sIHt9KVxyXG4gICAgICAgIHBvc3QuaWQgPSB2LmlkXHJcbiAgICAgICAgcG9zdHMucHVzaChwb3N0KVxyXG4gICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgZGMuY2xvc2UoKVxyXG4gICAgICByZXR1cm4gcG9zdHNcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUicsIGVycilcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ld2VzdFJldmlldyJdfQ==