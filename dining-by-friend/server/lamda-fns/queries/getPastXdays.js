"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gremlin = require('gremlin');
const DriverRemoteConnection = gremlin.driver.DriverRemoteConnection;
const Graph = gremlin.structure.Graph;
const uri = process.env.READER;
const pastXDays = async (userName, date) => {
    let dc = new DriverRemoteConnection(`wss://${uri}/gremlin`, {});
    const graph = new Graph();
    const g = graph.traversal().withRemote(dc);
    try {
        let data = await g.V().hasLabel('person').has('userName', userName).out('addReview').has('date', new Date(date).toJSON()).toList();
        let posts = Array();
        for (const v of data) {
            const _properties = await g.V(v.id).properties().toList();
            let post = _properties.reduce((acc, next) => {
                acc[next.label] = next.value;
                return acc;
            }, {});
            post.id = v.id;
            posts.push(post);
        }
        dc.close();
        return posts;
    }
    catch (err) {
        console.log('ERROR', err);
        return null;
    }
};
exports.default = pastXDays;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGFzdFhkYXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0UGFzdFhkYXlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRWxDLE1BQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQTtBQUNwRSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQTtBQUNyQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQTtBQUs5QixNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsUUFBZSxFQUFFLElBQVcsRUFBRSxFQUFFO0lBQ3JELElBQUksRUFBRSxHQUFHLElBQUksc0JBQXNCLENBQUMsU0FBUyxHQUFHLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMvRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFBO0lBQ3pCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDMUMsSUFBSTtRQUNGLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbEksSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFLENBQUE7UUFFbkIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUN6RCxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7Z0JBQzVCLE9BQU8sR0FBRyxDQUFBO1lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ04sSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBO1lBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNqQjtRQUVELEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNWLE9BQU8sS0FBSyxDQUFBO0tBQ2I7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3pCLE9BQU8sSUFBSSxDQUFBO0tBQ2Q7QUFDTCxDQUFDLENBQUE7QUFJRCxrQkFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBncmVtbGluID0gcmVxdWlyZSgnZ3JlbWxpbicpXHJcblxyXG5jb25zdCBEcml2ZXJSZW1vdGVDb25uZWN0aW9uID0gZ3JlbWxpbi5kcml2ZXIuRHJpdmVyUmVtb3RlQ29ubmVjdGlvblxyXG5jb25zdCBHcmFwaCA9IGdyZW1saW4uc3RydWN0dXJlLkdyYXBoXHJcbmNvbnN0IHVyaSA9IHByb2Nlc3MuZW52LlJFQURFUlxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgcGFzdFhEYXlzID0gYXN5bmMgKHVzZXJOYW1lOlN0cmluZywgZGF0ZTpzdHJpbmcpID0+IHtcclxuICAgIGxldCBkYyA9IG5ldyBEcml2ZXJSZW1vdGVDb25uZWN0aW9uKGB3c3M6Ly8ke3VyaX0vZ3JlbWxpbmAsIHt9KVxyXG4gICAgY29uc3QgZ3JhcGggPSBuZXcgR3JhcGgoKVxyXG4gICAgY29uc3QgZyA9IGdyYXBoLnRyYXZlcnNhbCgpLndpdGhSZW1vdGUoZGMpXHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgZGF0YSA9IGF3YWl0IGcuVigpLmhhc0xhYmVsKCdwZXJzb24nKS5oYXMoJ3VzZXJOYW1lJywgdXNlck5hbWUpLm91dCgnYWRkUmV2aWV3JykuaGFzKCdkYXRlJywgbmV3IERhdGUoZGF0ZSkudG9KU09OKCkpLnRvTGlzdCgpXHJcbiAgICAgIGxldCBwb3N0cyA9IEFycmF5KClcclxuXHJcbiAgICAgIGZvciAoY29uc3QgdiBvZiBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgX3Byb3BlcnRpZXMgPSBhd2FpdCBnLlYodi5pZCkucHJvcGVydGllcygpLnRvTGlzdCgpXHJcbiAgICAgICAgbGV0IHBvc3QgPSBfcHJvcGVydGllcy5yZWR1Y2UoKGFjYywgbmV4dCkgPT4ge1xyXG4gICAgICAgICAgYWNjW25leHQubGFiZWxdID0gbmV4dC52YWx1ZVxyXG4gICAgICAgICAgcmV0dXJuIGFjY1xyXG4gICAgICAgIH0sIHt9KVxyXG4gICAgICAgIHBvc3QuaWQgPSB2LmlkXHJcbiAgICAgICAgcG9zdHMucHVzaChwb3N0KVxyXG4gICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgZGMuY2xvc2UoKVxyXG4gICAgICByZXR1cm4gcG9zdHNcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUicsIGVycilcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBhc3RYRGF5czsiXX0=